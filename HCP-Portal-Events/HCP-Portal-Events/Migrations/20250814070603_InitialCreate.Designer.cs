// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApiProject.Data;

#nullable disable

namespace HCP_Portal_Events.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250814070603_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HCP_Portal_Events.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("no")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("EventId");

                    b.ToTable("Activities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityTypeId = 1,
                            Date = new DateTime(2025, 9, 8, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642),
                            Description = "Introduction to cardiology principles",
                            EventId = 1,
                            Title = "Cardio Basics Module",
                            no = 1
                        },
                        new
                        {
                            Id = 2,
                            ActivityTypeId = 2,
                            Date = new DateTime(2025, 8, 4, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642),
                            Description = "Hands-on pediatric patient care",
                            EventId = 2,
                            Title = "Pediatric Care Activity",
                            no = 2
                        },
                        new
                        {
                            Id = 3,
                            ActivityTypeId = 1,
                            Date = new DateTime(2025, 8, 19, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642),
                            Description = "Fundamentals of neurology",
                            EventId = 3,
                            Title = "Neuro Module 1",
                            no = 1
                        });
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.ActivitySpeaker", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivitySpeakers");

                    b.HasData(
                        new
                        {
                            ActivityId = 1,
                            UserId = 1
                        },
                        new
                        {
                            ActivityId = 1,
                            UserId = 2
                        },
                        new
                        {
                            ActivityId = 2,
                            UserId = 3
                        },
                        new
                        {
                            ActivityId = 3,
                            UserId = 2
                        },
                        new
                        {
                            ActivityId = 3,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Module"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Activity"
                        });
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Attachments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 1,
                            FileName = "cardio-module.pdf",
                            FilePath = "/files/cardio-module.pdf"
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 2,
                            FileName = "pediatric-activity.pdf",
                            FilePath = "/files/pediatric-activity.pdf"
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 3,
                            FileName = "neuro-module1.pdf",
                            FilePath = "/files/neuro-module1.pdf"
                        });
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventStatusId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("CASE WHEN [Date] < GETDATE() THEN 'Previous' ELSE 'Upcoming' END", true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("eventSpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("imageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("linkToevent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("noOfAttendees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("EventStatusId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("eventSpecialityId");

                    b.ToTable("Events", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 9, 13, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642),
                            Description = "Continuing Medical Education for Cardiology",
                            EventTypeId = 1,
                            Status = "Upcoming",
                            Title = "Cardiology CME 2023",
                            eventSpecialityId = 1,
                            imageUrl = "https://example.com/events/cardio-cme.jpg",
                            linkToevent = "https://zoom.us/cardio-cme-2023",
                            noOfAttendees = 120
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 7, 30, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642),
                            Description = "Latest updates in pediatric medicine",
                            EventTypeId = 1,
                            Status = "Pervious",
                            Title = "Pediatric CME Update",
                            eventSpecialityId = 3,
                            imageUrl = "https://example.com/events/ped-cme.jpg",
                            linkToevent = "",
                            noOfAttendees = 80
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 8, 21, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642),
                            Description = "Monthly webinars on neurology advancements",
                            EventTypeId = 2,
                            Status = "Upcoming",
                            Title = "Neurology Webinar Series",
                            eventSpecialityId = 2,
                            imageUrl = "https://example.com/events/neuro-webinar.jpg",
                            linkToevent = "https://zoom.us/neuro-webinar",
                            noOfAttendees = 75
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 9, 28, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642),
                            Description = "Recent advances in cancer treatment",
                            EventTypeId = 2,
                            Status = "Upcoming",
                            Title = "Oncology Webinar",
                            eventSpecialityId = 4,
                            imageUrl = "https://example.com/events/onco-webinar.jpg",
                            linkToevent = "https://zoom.us/onco-webinar",
                            noOfAttendees = 90
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 8, 9, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642),
                            Description = "Important updates for general practitioners",
                            EventTypeId = 2,
                            Status = "Pervious",
                            Title = "GP Webinar: Annual Updates",
                            eventSpecialityId = 5,
                            imageUrl = "https://example.com/events/gp-webinar.jpg",
                            linkToevent = "",
                            noOfAttendees = 150
                        });
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.EventStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventStatuses");
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "CME"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Webinar"
                        });
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Field")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Field = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            Field = "Neurology"
                        },
                        new
                        {
                            Id = 3,
                            Field = "Pediatrics"
                        },
                        new
                        {
                            Id = 4,
                            Field = "Oncology"
                        },
                        new
                        {
                            Id = 5,
                            Field = "General Practice"
                        });
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "dr.smith@example.com",
                            PhoneNumber = 1234567890L,
                            ProfilePicture = "https://example.com/profiles/smith.jpg",
                            SpecialityId = 1,
                            UserName = "dr_smith"
                        },
                        new
                        {
                            Id = 2,
                            Email = "dr.jones@example.com",
                            PhoneNumber = 2345678901L,
                            ProfilePicture = "https://example.com/profiles/jones.jpg",
                            SpecialityId = 2,
                            UserName = "dr_jones"
                        },
                        new
                        {
                            Id = 3,
                            Email = "dr.williams@example.com",
                            PhoneNumber = 3456789012L,
                            ProfilePicture = "https://example.com/profiles/williams.jpg",
                            SpecialityId = 3,
                            UserName = "dr_williams"
                        },
                        new
                        {
                            Id = 4,
                            Email = "dr.brown@example.com",
                            PhoneNumber = 4567890123L,
                            ProfilePicture = "https://example.com/profiles/brown.jpg",
                            SpecialityId = 4,
                            UserName = "dr_brown"
                        },
                        new
                        {
                            Id = 5,
                            Email = "dr.taylor@example.com",
                            PhoneNumber = 5678901234L,
                            ProfilePicture = "https://example.com/profiles/taylor.jpg",
                            SpecialityId = 5,
                            UserName = "dr_taylor"
                        });
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.UserRegistrationToEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRegistrationToEvents");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            UserId = 1,
                            IsCancelled = false,
                            RegistrationDate = new DateTime(2025, 7, 26, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642)
                        },
                        new
                        {
                            EventId = 2,
                            UserId = 3,
                            IsCancelled = false,
                            RegistrationDate = new DateTime(2025, 7, 27, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642)
                        },
                        new
                        {
                            EventId = 2,
                            UserId = 1,
                            IsCancelled = true,
                            RegistrationDate = new DateTime(2025, 7, 28, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642)
                        },
                        new
                        {
                            EventId = 3,
                            UserId = 2,
                            IsCancelled = false,
                            RegistrationDate = new DateTime(2025, 7, 29, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642)
                        },
                        new
                        {
                            EventId = 4,
                            UserId = 4,
                            IsCancelled = false,
                            RegistrationDate = new DateTime(2025, 7, 30, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642)
                        },
                        new
                        {
                            EventId = 5,
                            UserId = 5,
                            IsCancelled = false,
                            RegistrationDate = new DateTime(2025, 7, 31, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642)
                        },
                        new
                        {
                            EventId = 5,
                            UserId = 3,
                            IsCancelled = true,
                            RegistrationDate = new DateTime(2025, 8, 1, 10, 6, 3, 114, DateTimeKind.Local).AddTicks(4642)
                        });
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.Activity", b =>
                {
                    b.HasOne("HCP_Portal_Events.Models.ActivityType", "ActivityType")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HCP_Portal_Events.Models.Event", "Event")
                        .WithMany("EventActivities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.ActivitySpeaker", b =>
                {
                    b.HasOne("HCP_Portal_Events.Models.Activity", "Activity")
                        .WithMany("ActivitySpeakers")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCP_Portal_Events.Models.User", "User")
                        .WithMany("SpeakerActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.Attachment", b =>
                {
                    b.HasOne("HCP_Portal_Events.Models.Activity", "Activity")
                        .WithMany("Attachments")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.Event", b =>
                {
                    b.HasOne("HCP_Portal_Events.Models.EventStatus", null)
                        .WithMany("Events")
                        .HasForeignKey("EventStatusId");

                    b.HasOne("HCP_Portal_Events.Models.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HCP_Portal_Events.Models.Speciality", "eventSpeciality")
                        .WithMany("Events")
                        .HasForeignKey("eventSpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventType");

                    b.Navigation("eventSpeciality");
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.User", b =>
                {
                    b.HasOne("HCP_Portal_Events.Models.Speciality", "Speciality")
                        .WithMany("Users")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.UserRegistrationToEvent", b =>
                {
                    b.HasOne("HCP_Portal_Events.Models.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HCP_Portal_Events.Models.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.Activity", b =>
                {
                    b.Navigation("ActivitySpeakers");

                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.ActivityType", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.Event", b =>
                {
                    b.Navigation("EventActivities");

                    b.Navigation("EventUsers");
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.EventStatus", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.Speciality", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("HCP_Portal_Events.Models.User", b =>
                {
                    b.Navigation("SpeakerActivities");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
